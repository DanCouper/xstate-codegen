import {
  EventObject,
  SingleOrArray,
  InvokeConfig,
  StateMachine,
  Actions,
  DoneEventObject,
  DelayedTransitions,
  Activity,
  Mapper,
  PropertyMapper,
  Condition,
  StateValue,
  ActionObject,
  ActionFunction,
  ActivityConfig,
  DoneInvokeEvent,
  ErrorPlatformEvent,
  InvokeCreator,
  assign,
  send,
  Expr,
  Typestate,
  StateNodeConfig as ImportedStateNodeConfig,
  StateNode,
} from 'xstate';
import {
  StateWithMatches,
  InterpreterWithMatches,
  RegisteredMachine,
} from '@xstate/compiled';
import { Interpreter } from 'xstate/lib/interpreter';
import { State } from 'xstate/lib/State';


declare module '@xstate/compiled' {
  type TwoLevelPartial<T extends object> = { [K in keyof T]?: Partial<T[K]>};

  /** Generated Types */
  {{#each machines}}
  export class {{capitalize this.id}}StateMachine<
    TContext,
    TEvent extends EventObject,
    TTypestate extends Typestate<TContext>,
    Id extends '{{ this.id }}'
  > extends StateNodeWithGeneratedTypes<TContext, any, TEvent, TTypestate> {
    id: Id;
    states: StateNode<TContext, any, TEvent>['states'];
    _matches:
      {{#if this.machine.stateMatches}}
      {{#each this.machine.stateMatches}}
      | '{{this}}'
      {{/each}}
      {{else}}
      never;
      {{/if}}
    _options: {
      context?: Partial<TContext>;
      {{#if this.machine.condLines}}
      guards: {
        {{#each this.machine.condLines}}
        {{this.name}}{{#unless this.required}}?{{/unless}}: (
          context: Extract<TTypestate, { value:
            {{#each this.states}} | {{{this}}} {{/each}} 
          }>['context'] extends undefined
            ? TContext
            : Extract<TTypestate, { value:
              {{#each this.states}} | {{{this}}} {{/each}} 
            }>['context'],
            {{#if this.events}}
          event:
            Extract<TEvent,
            {{#each this.events}}
            | { type: '{{this}}' }
            {{/each}}
            >
            {{/if}}
          ) => boolean;
        {{/each}}
      };
      {{/if}}
      {{#if this.machine.actionLines}}
      actions: {
        {{#each this.machine.actionLines}}
        {{this.name}}{{#unless this.required}}?{{/unless}}:
          | ActionObject<
              Extract<TTypestate, { value:
                {{#each this.states}} | {{{this}}} {{/each}} 
              }>['context'] extends undefined
                ? TContext
                : Extract<TTypestate, { value:
                  {{#each this.states}} | {{{this}}} {{/each}} 
                }>['context'],
              {{#if this.events}}
              Extract<TEvent,
              {{#each this.events}}
              | { type: '{{this}}' }
              {{/each}}
              > extends undefined ? TEvent : Extract<TEvent,
              {{#each this.events}}
              | { type: '{{this}}' }
              {{/each}}
              >
              {{else}}
              TEvent
              {{/if}}
            >
          | ActionFunction<
              Extract<TTypestate, { value:
                {{#each this.states}} | {{{this}}} {{/each}} 
              }>['context'] extends undefined
                ? TContext
                : Extract<TTypestate, { value:
                  {{#each this.states}} | {{{this}}} {{/each}} 
                }>['context'],
              {{#if this.events}}
              Extract<TEvent,
              {{#each this.events}}
              | { type: '{{this}}' }
              {{/each}}
              > extends undefined ? TEvent : Extract<TEvent,
              {{#each this.events}}
              | { type: '{{this}}' }
              {{/each}}
              >
              {{else}}
              TEvent
              {{/if}}
            >;
        {{/each}}
      };
      {{/if}}
      {{#if this.machine.services}}
      services: {
        {{#each this.machine.services}}
        {{this.name}}{{#unless this.required}}?{{/unless}}: InvokeCreator<
          Extract<TTypestate, { value:
            {{#each this.states}} | {{{this}}} {{/each}} 
          }>['context'] extends undefined
            ? TContext
            : Extract<TTypestate, { value:
              {{#each this.states}} | {{{this}}} {{/each}} 
            }>['context'],
          {{#if this.events}}
          Extract<TEvent,
          {{#each this.events}}
          | { type: '{{this}}' }
          {{/each}}
          >
          {{else}}
          DoneEventObject
          {{/if}},
          Extract<
            TEvent,
            { type: 'done.invoke.{{this.name}}'}> extends { 'data': infer T } ? T : any
          > | StateMachine<any, any, any>
        {{/each}}
      };
      {{/if}}
      {{#if this.machine.activities}}
      activities: {
        {{#each this.machine.activities}}    
        {{this.name}}{{#unless this.required}}?{{/unless}}: ActivityConfig<TContext, TEvent>;
        {{/each}}
      };
      {{/if}}
      devTools?: boolean;
    };
    _subState: {{{this.machine.subState}}};
  }
  {{/each}}

  export interface RegisteredMachinesMap<TContext, TEvent extends EventObject, TTypestate extends Typestate<TContext> = any> {
    {{#each machines}}
    {{this.id}}: {{capitalize this.id}}StateMachine<TContext, TEvent, TTypestate, '{{this.id}}'>
    {{/each}}
  }

  /** Utility types */

  export type InvokeConfig<
    TContext,
    TEvent extends EventObject,
    TSubState extends SubState
  > = {
    /**
     * The unique identifier for the invoked machine. If not specified, this
     * will be the machine's own `id`, or the URL (from `src`).
     */
    id?: string;
    /**
     * The source of the machine to be invoked, or the machine itself.
     */
    src:
      | string
      | StateMachine<any, any, any>
      | InvokeCreator<TContext, TEvent, any>;
    /**
     * If `true`, events sent to the parent service will be forwarded to the invoked service.
     *
     * Default: `false`
     */
    autoForward?: boolean;
    /**
     * @deprecated
     *
     *  Use `autoForward` property instead of `forward`. Support for `forward` will get removed in the future.
     */
    forward?: boolean;
    /**
     * Data from the parent machine's context to set as the (partial or full) context
     * for the invoked child machine.
     *
     * Data should be mapped to match the child machine's context shape.
     */
    data?:
      | Mapper<TContext, TEvent, any>
      | PropertyMapper<TContext, TEvent, any>;
    /**
     * The transition to take upon the invoked child machine reaching its final top-level state.
     */
    onDone?:
      | TSubState['targets']
      | SingleOrArray<TransitionConfig<TContext, DoneEventObject, TSubState>>;
    /**
     * The transition to take upon the invoked child machine sending an error event.
     */
    onError?:
      | TSubState['targets']
      | SingleOrArray<TransitionConfig<TContext, ErrorPlatformEvent, TSubState>>;
  };

  export type RegisteredMachine<
    TContext,
    TEvent extends EventObject,
    TTypestate extends Typestate<TContext> = any
  > = RegisteredMachinesMap<TContext, TEvent, TTypestate>[keyof RegisteredMachinesMap<
    TContext,
    TEvent,
    TTypestate
  >];

  export class StateNodeWithGeneratedTypes<
    TContext,
    TSchema,
    TEvent extends EventObject,
    TTypestate extends Typestate<TContext>
  > extends StateNode<TContext, TSchema, TEvent, TTypestate> {}

  export type DelayedTransitions<
    TContext,
    TEvent extends EventObject,
    TSubState extends SubState
  > =
    | Record<
        string | number,
        | TSubState['targets']
        | SingleOrArray<TransitionConfig<TContext, TEvent, TSubState>>
      >
    | Array<
        TransitionConfig<TContext, TEvent, TSubState> & {
          delay: number | string | Expr<TContext, TEvent, number>;
        }
      >;

  export type InterpreterWithMatches<
    TContext,
    TSchema,
    TEvent extends EventObject,
    TTypestate extends Typestate<TContext>,
    Id extends keyof RegisteredMachinesMap<TContext, TEvent>
  > = Omit<Interpreter<TContext, TSchema, TEvent, TTypestate>, 'state'> & {
    state: StateWithMatches<
      TContext,
      TEvent,
      TTypestate,
      Id
    >;
  };

  export class StateWithMatches<
    TContext,
    TEvent extends EventObject,
    TTypestate extends Typestate<TContext>,
    Id extends keyof RegisteredMachinesMap<TContext, TEvent, TTypestate>
  > extends State<TContext, TEvent, TTypestate> {
    // @ts-ignore
    matches<TSV extends TTypestate['value']>(
      parentStateValue: TSV
    ): this is State<
      (TTypestate extends { value: TSV } ? TTypestate : never)['context'],
      TEvent,
      TTypestate
    > & { 
      value: TSV
    }
  }

  export function interpret<
    TContext,
    TSchema,
    TEvent extends EventObject,
    TTypestate extends Typestate<TContext>,
    Id extends keyof RegisteredMachinesMap<TContext, TEvent, TTypestate>
  >(
    machine: Extract<RegisteredMachine<TContext, TEvent, TTypestate>, { id: Id }>,
    options: Extract<
      RegisteredMachine<TContext, TEvent, TTypestate>,
      { id: Id }
    >['_options'],
  ): InterpreterWithMatches<TContext, TSchema, TEvent, TTypestate, Id>;

  export function Machine<
    TContext,
    TEvent extends EventObject,
    Id extends keyof RegisteredMachinesMap<TContext, TEvent>
  >(
    config: MachineConfig<
      TContext,
      TEvent,
      RegisteredMachinesMap<TContext, TEvent>[Id]['_subState']
    >,
    options?: TwoLevelPartial<
      Extract<
        RegisteredMachine<TContext, TEvent>,
        { id: Id }
      >['_options']
    >,
  ): RegisteredMachinesMap<TContext, TEvent>[Id];

  export function createMachine<
    TContext,
    TEvent extends EventObject,
    Id extends keyof RegisteredMachinesMap<TContext, TEvent>
  >(
    config: MachineConfig<
      TContext,
      TEvent,
      RegisteredMachinesMap<TContext, TEvent>[Id]['_subState']
    >,
    options?: TwoLevelPartial<
      Extract<
        RegisteredMachine<TContext, TEvent>,
        { id: Id }
      >['_options']
    >,
  ): RegisteredMachinesMap<TContext, TEvent>[Id];

  export function createMachine<
    TContext,
    TEvent extends EventObject,
    TTypestate extends Typestate<TContext>,
    Id extends keyof RegisteredMachinesMap<TContext, TEvent, TTypestate>
  >(
    config: MachineConfig<
      TContext,
      TEvent,
      RegisteredMachinesMap<TContext, TEvent, TTypestate>[Id]['_subState']
    >,
    options?: TwoLevelPartial<
      Extract<
        RegisteredMachine<TContext, TEvent, TTypestate>,
        { id: Id }
      >['_options']
    >,
  ): RegisteredMachinesMap<TContext, TEvent, TTypestate>[Id];

  export interface MachineConfig<
    TContext,
    TEvent extends EventObject,
    TSubState extends SubState
  > extends StateNodeConfig<TContext, TEvent, TSubState> {
    /**
     * The initial context (extended state)
     */
    context?: TContext | (() => TContext);
    /**
     * The machine's own version.
     */
    version?: string;
  }

  export interface SubState {
    targets: string;
    sources: string;
    states: Record<string, SubState>;
  }

  export type TransitionConfigTarget<TSubState extends SubState> =
    | TSubState['targets']
    | undefined;

  export type TransitionTarget<TSubState extends SubState> = SingleOrArray<
    TSubState['targets']
  >;

  export interface TransitionConfig<
    TContext,
    TEvent extends EventObject,
    TSubState extends SubState
  > {
    cond?: Condition<TContext, TEvent>;
    actions?: Actions<TContext, TEvent>;
    in?: StateValue;
    internal?: boolean;
    target?: TransitionTarget<TSubState>;
    meta?: Record<string, any>;
  }

  export type TransitionConfigOrTarget<
    TContext,
    TEvent extends EventObject,
    TSubState extends SubState
  > = SingleOrArray<
    | TransitionConfigTarget<TSubState>
    | TransitionConfig<TContext, TEvent, TSubState>
  >;

  export type TransitionsConfigMap<
    TContext,
    TEvent extends EventObject,
    TSubState extends SubState
  > = {
    [K in TEvent['type']]?: TransitionConfigOrTarget<
      TContext,
      TEvent extends {
        type: K;
      }
        ? TEvent
        : never,
      TSubState
    >;
  } & {
    ''?: TransitionConfigOrTarget<TContext, TEvent, TSubState>;
  } & {
    '*'?: TransitionConfigOrTarget<TContext, TEvent, TSubState>;
  };

  export type TransitionsConfigArray<
    TContext,
    TEvent extends EventObject,
    TSubState extends SubState
  > = Array<TransitionsConfigMap<TContext, TEvent, TSubState>>;

  export type TransitionsConfig<
    TContext,
    TEvent extends EventObject,
    TSubState extends SubState
  > =
    | TransitionsConfigMap<TContext, TEvent, TSubState>
    | TransitionsConfigArray<TContext, TEvent, TSubState>;

  export interface StateNodeConfig<
    TContext,
    TEvent extends EventObject,
    TSubState extends SubState
  > extends Omit<
    ImportedStateNodeConfig<TContext, any, TEvent>,
      | 'initial'
      | 'context'
      | 'states'
      | 'invoke'
      | 'on'
      | 'onEntry'
      | 'entry'
      | 'onExit'
      | 'exit'
      | 'onDone'
      | 'after'
      | 'always'
      | 'activities'
  > {
    /**
     * The initial state node key.
     */
    initial?: keyof TSubState['states'];
    /**
     * The initial context (extended state) of the machine.
     *
     * Can be an object or a function that returns an object.
     */
    context?: TContext | (() => TContext);
    /**
     * The mapping of state node keys to their state node configurations (recursive).
     */
    states?: {
      [K in keyof TSubState['states']]: StateNodeConfig<
        TContext,
        TEvent,
        TSubState['states'][K]
      >;
    };
    /**
     * The services to invoke upon entering this state node. These services will be stopped upon exiting this state node.
     */
    invoke?: SingleOrArray<
      | InvokeConfig<
          TContext,
          TEvent,
          TSubState
        >
      | StateMachine<any, any, any>
    >;
    /**
     * The mapping of event types to their potential transition(s).
     */
    on?: TransitionsConfig<TContext, TEvent, TSubState>;
    /**
     * The action(s) to be executed upon entering the state node.
     *
     * @deprecated Use `entry` instead.
     */
    onEntry?: Actions<
      TContext,
      Extract<TEvent, { type: TSubState['sources'] }>
    >;
    /**
     * The action(s) to be executed upon entering the state node.
     */
    entry?: Actions<TContext, Extract<TEvent, { type: TSubState['sources'] }>>;
    /**
     * The action(s) to be executed upon exiting the state node.
     *
     * @deprecated Use `exit` instead.
     */
    onExit?: Actions<TContext, TEvent>;
    /**
     * The action(s) to be executed upon exiting the state node.
     */
    exit?: Actions<TContext, TEvent>;
    /**
     * The potential transition(s) to be taken upon reaching a final child state node.
     *
     * This is equivalent to defining a `[done(id)]` transition on this state node's `on` property.
     */
    onDone?:
      | TSubState['targets']
      | SingleOrArray<TransitionConfig<TContext, DoneEventObject, TSubState>>;
    /**
     * The mapping (or array) of delays (in milliseconds) to their potential transition(s).
     * The delayed transitions are taken after the specified delay in an interpreter.
     */
    after?: DelayedTransitions<TContext, TEvent, TSubState>;
    /**
     * An eventless transition that is always taken when this state node is active.
     * Equivalent to a transition specified as an empty `''`' string in the `on` property.
     */
    always?: TransitionConfigOrTarget<
      TContext,
      Extract<TEvent, { type: TSubState['sources'] }>,
      TSubState
    >;
    /**
     * The activities to be started upon entering the state node,
     * and stopped upon exiting the state node.
     */
    activities?: SingleOrArray<
      Activity<TContext, Extract<TEvent, { type: TSubState['sources'] }>>
    >;
  }

  // @ts-ignore
  export { mapState, actions, assign, send, sendParent, sendUpdate, forwardTo, matchState, spawn, doneInvoke } from 'xstate';
}